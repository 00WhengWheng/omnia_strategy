# main.tf
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
}

# VPC Network Configuration
resource "google_compute_network" "trading_vpc" {
  name                    = "trading-vpc"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "trading_subnet" {
  name          = "trading-subnet"
  ip_cidr_range = "10.0.0.0/24"
  network       = google_compute_network.trading_vpc.id
  region        = var.region
}

# Cloud SQL for storing trading data and analytics
resource "google_sql_database_instance" "trading_db" {
  name             = "trading-db-instance"
  database_version = "POSTGRES_13"
  region           = var.region

  settings {
    tier = "db-f1-micro"
    ip_configuration {
      ipv4_enabled = true
      private_network = google_compute_network.trading_vpc.id
    }
    backup_configuration {
      enabled = true
      start_time = "02:00"
    }
  }
}

resource "google_sql_database" "trading_database" {
  name     = "trading_data"
  instance = google_sql_database_instance.trading_db.name
}

# Cloud Storage for data lake and model artifacts
resource "google_storage_bucket" "data_lake" {
  name     = "${var.project_id}-trading-data-lake"
  location = var.region
  versioning {
    enabled = true
  }
}

# Pub/Sub topics for market data streaming
resource "google_pubsub_topic" "market_data" {
  name = "market-data"
}

resource "google_pubsub_subscription" "market_data_sub" {
  name  = "market-data-sub"
  topic = google_pubsub_topic.market_data.name
}

# Cloud Functions for data processing and trading logic
resource "google_storage_bucket" "functions_bucket" {
  name     = "${var.project_id}-functions"
  location = var.region
}

resource "google_cloudfunctions_function" "data_processor" {
  name        = "market-data-processor"
  runtime     = "python39"
  entry_point = "process_market_data"

  source_archive_bucket = google_storage_bucket.functions_bucket.name
  source_archive_object = google_storage_bucket_object.function_zip.name

  event_trigger {
    event_type = "providers/cloud.pubsub/eventTypes/topic.publish"
    resource   = google_pubsub_topic.market_data.name
  }

  environment_variables = {
    DB_INSTANCE = google_sql_database_instance.trading_db.connection_name
    DB_NAME     = google_sql_database.trading_database.name
  }
}

# GKE Cluster for trading strategy execution
resource "google_container_cluster" "trading_cluster" {
  name     = "trading-cluster"
  location = var.region

  remove_default_node_pool = true
  initial_node_count       = 1

  network    = google_compute_network.trading_vpc.name
  subnetwork = google_compute_subnetwork.trading_subnet.name
}

resource "google_container_node_pool" "trading_nodes" {
  name       = "trading-node-pool"
  cluster    = google_container_cluster.trading_cluster.name
  location   = var.region
  node_count = 3

  node_config {
    machine_type = "e2-standard-2"
    oauth_scopes = [
      "https://www.googleapis.com/auth/cloud-platform"
    ]
  }
}

# Cloud Monitoring workspace
resource "google_monitoring_workspace" "trading_workspace" {
  name = "trading-monitoring"
}

# IAM configuration
resource "google_service_account" "trading_service_account" {
  account_id   = "trading-service-account"
  display_name = "Trading System Service Account"
}

resource "google_project_iam_member" "trading_sa_roles" {
  for_each = toset([
    "roles/cloudsql.client",
    "roles/storage.objectViewer",
    "roles/pubsub.publisher",
    "roles/pubsub.subscriber"
  ])
  
  role    = each.key
  member  = "serviceAccount:${google_service_account.trading_service_account.email}"
  project = var.project_id
}

# Variables file (variables.tf)
variable "project_id" {
  description = "The GCP project ID"
  type        = string
}

variable "region" {
  description = "The GCP region"
  type        = string
  default     = "us-central1"
}

# Outputs file (outputs.tf)
output "kubernetes_cluster_name" {
  value = google_container_cluster.trading_cluster.name
}

output "database_instance_name" {
  value = google_sql_database_instance.trading_db.name
}

output "data_lake_bucket" {
  value = google_storage_bucket.data_lake.name
}
